@page "/chuck-a-luck"
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject IGameService GameService
@inject IJSRuntime JSRuntime

<PageTitle>Игра</PageTitle>

<h3>Chuck-a-Luck</h3>


@if (isConnected)
{   
    <div class="my-row">
        <div class="game-container">
            <div>
                <div class="player-info">
                    <h4>@player.Name</h4>
                    <p>Баланс: @player.Balance</p>
                    <p>Текущая ставка: @player.BetType @(player.BetType is BetType.Number ? $"({player.BetNumber})" : "")</p>
                    <p>Размер ставки: @player.BetAmount</p>
                </div>

                <div class="opponent-info">
                    <h4>@opponent.Name</h4>
                    <p>Баланс: @opponent.Balance</p>
                    <p>Текущая ставка: @opponent.BetType @(opponent.BetType is BetType.Number ? $"({opponent.BetNumber})" : "")</p>
                    <p>Размер ставки: @opponent.BetAmount</p>
                </div>
            </div>
            <p>@gameStatus</p>
        </div>

        <div class="betting-section">
            <h4>Сделать ставку</h4>
            <div>
                <input type="radio" id="number" name="betType" value="Number" checked @onchange="() => SelectBet('N')" />
                <label for="number" title="Угадано одно число - выигрыш х1. Угадано два числа - выигрыш х2.">Ставка на число</label>
                @if (currentBetType == "Number")
                {
                    <input type="number" id="betNumber" min="1" max="6" @bind="selectedNumber" />
                }
            </div>
            <div>
                <input type="radio" id="small" name="betType" value="Small" @onchange="() => SelectBet('S')" />
                <label for="small" title="Сумма костей от 4 до 10 включительно - выигрыш х1.">Малые</label>
            </div>
            <div>
                <input type="radio" id="big" name="betType" value="Big" @onchange="() => SelectBet('B')" />
                <label for="big" title="Сумма костей от 11 до 17 включительно - выигрыш х1.">Большие</label>
            </div>
            <div>
                <input type="radio" id="triple" name="betType" value="Triple" @onchange="() => SelectBet('T')" />
                <label for="triple" title="Три одинаковые кости - выигрыш х30.">Тройка</label>
            </div>

            <div>
                <label for="betAmount">Размер ставки:</label>
                <input type="number" id="betAmount" min="10" step="10" @bind="currentBetAmount" />
            </div>

            <button @onclick="PlaceBet" disabled="@(IsButtonDisabled())">Сделать ставку</button>
        </div>
    </div>
    <div class="dice-container">
        <div class="dice" style="animation-delay: 0s;">@dices[0]</div>
        <div class="dice" style="animation-delay: 0.1s;">@dices[1]</div>
        <div class="dice" style="animation-delay: 0.2s;">@dices[2]</div>
    </div>
}
else
{
    <p>Подключение к серверу...</p>
}

@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public string GameName { get; set; } = "";

    [SupplyParameterFromQuery]
    [Parameter]
    public string Username { get; set; } = "";

    private Player player = null;
    private Player opponent = null;
    private bool isOpponentBet = false;
    private bool isCurrentBet = false;
    private string currentBetType = "Number";
    private int currentBetAmount = 10;
    private int selectedNumber = 1;
    private string gameStatus = "Ожидание ставок...";
    private bool isConnected = false;
    private List<int> dices = [ 1, 1, 1 ];
    private TaskCompletionSource<bool> betPlacedTaskSource;
    private string gameResult = string.Empty;

    private IDisposable? _placeBetCurrent;
    private IDisposable? _placeBetOpponent;
    private IDisposable? _diceRollResults;
    private IDisposable? _endGameMessage;
    private IDisposable? _endGameOpponentMessage;
    private IDisposable? _playerLeft;
    private IDisposable? _playerJoined;

    protected override async Task OnInitializedAsync()
    {   
        var users = await GameService.GetUsersInfo(GameName);
        player = users[0];
        opponent = users[1];
        GameService.CreateConnection("PlaceBetOpponent", (Player opp) => {
            opponent = opp;
            isOpponentBet = true;
            StateHasChanged();
        });

        _placeBetCurrent = GameService.CreateConnection("PlaceBetCurrent", (Player pl) =>
        {
            player = pl;
            isCurrentBet = true;
            gameStatus = "Ставка сделана. Ожидание результатов...";
            StateHasChanged();
            betPlacedTaskSource?.SetResult(true);
        });

        _placeBetOpponent = GameService.CreateConnection("GameResult", async (Player pl) =>
        {   
            var users = await GameService.GetUsersInfo(GameName);
            player = users[0];
            opponent = users[1];
            gameStatus = "Ожидание ставок...";
            isOpponentBet = false;
            isCurrentBet = false;
            StateHasChanged();
        });

        _diceRollResults = GameService.CreateConnection("DiceRollResults", (List<int> dice) =>
        {
            dices[0] = dice[0];
            dices[1] = dice[1];
            dices[2] = dice[2];
            StateHasChanged();
        });

        _endGameMessage = GameService.CreateConnection("EndGameMessage", async (string msg, string msgRes) =>
        {
            gameResult = msg;
            await JSRuntime.InvokeVoidAsync("alert", gameResult);
            await GameService.LeaveGame(GameName, msgRes);
            NavigationManager.NavigateTo("/");
        });

        _playerLeft = GameService.CreateConnection("PlayerLeft", async (string msg) =>
        {
            await JSRuntime.InvokeVoidAsync("alert", msg);
            isOpponentBet = false;
            isCurrentBet = false;
            dices = [1, 1, 1];
            StateHasChanged();
        });

        _playerJoined = GameService.CreateConnection("PlayerJoined", async () =>
        {
            var users = await GameService.GetUsersInfo(GameName);
            player = users[0];
            opponent = users[1];
            await JSRuntime.InvokeVoidAsync("alert", "Зашел новый соперник " + opponent.Name);
            StateHasChanged();
        });
        await GameService.ConnectToHub();
        isConnected = true;
    }

    private void SelectBet(char betType)
    {
        if (betType == 'N') { 
            currentBetType = "Number";
        }
        else if (betType == 'S') { 
            currentBetType = "Small";
        }
        else if (betType == 'B') { 
            currentBetType = "Big";
        }
        else if (betType == 'T') {
            currentBetType = "Triple";
        }
    }

    private bool IsButtonDisabled(){
        if(CanPlaceBet()){
            return isCurrentBet;
        };
        return true;
    }

    private bool CanPlaceBet()
    {
        return player.Balance >= currentBetAmount && currentBetAmount >= 10;
    }

    private async Task PlaceBet()
    {
        if (CanPlaceBet())
        {
            betPlacedTaskSource = new TaskCompletionSource<bool>();
            var betType = currentBetType switch
            {
                "Number" => BetType.Number,
                "Small" => BetType.Small,
                "Big" => BetType.Big,
                "Triple" => BetType.Triple,
                _ => BetType.Number
            };
            await GameService.PlaceBet(GameName, betType, selectedNumber, currentBetAmount);
            await betPlacedTaskSource.Task;
            if(isOpponentBet && isCurrentBet){
                await GameService.StartGame(GameName);
            }
            StateHasChanged();
        }
    }
    public async ValueTask DisposeAsync()
    {
        _placeBetCurrent?.Dispose();
        _placeBetOpponent?.Dispose();
        _diceRollResults?.Dispose();
        _endGameMessage?.Dispose();
        _endGameOpponentMessage?.Dispose();
        _playerLeft?.Dispose();
        _playerJoined?.Dispose();
        await GameService.LeaveGame(GameName, "Вы выиграли. Ваш противник вышел.");
    }
}